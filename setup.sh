#!/bin/bash

set -e

echo "üîê MCP Gatekeeper - OAuth 2.1 Proxy Setup"
echo "=========================================="
echo ""

# Check if .env exists
if [ -f .env ]; then
    echo "‚ö†Ô∏è  .env file already exists!"
    read -p "Do you want to overwrite it? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Setup cancelled."
        exit 0
    fi
fi

# Check for required commands
if ! command -v python3 &> /dev/null; then
    echo "‚ùå python3 is required but not installed."
    exit 1
fi

if ! command -v docker &> /dev/null; then
    echo "‚ùå docker is required but not installed."
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå docker-compose is required but not installed."
    exit 1
fi

echo "‚úÖ All prerequisites found"
echo ""

# Generate cookie secret
echo "üîë Generating OAuth2 Proxy cookie secret..."
COOKIE_SECRET=$(python3 -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(32)).decode())')
echo "‚úÖ Cookie secret generated"
echo ""

# Get OAuth provider choice
echo "Select OAuth Provider:"
echo "  1) Google"
echo "  2) GitHub"
echo "  3) Azure AD"
echo "  4) Generic OIDC"
echo ""
read -p "Enter choice (1-4): " provider_choice

case $provider_choice in
    1)
        PROVIDER="google"
        echo ""
        echo "üìù Google OAuth Setup:"
        echo "1. Go to https://console.cloud.google.com/apis/credentials"
        echo "2. Create OAuth 2.0 Client ID"
        echo "3. Add authorized redirect URI: http://localhost/oauth2/callback"
        echo ""
        ;;
    2)
        PROVIDER="github"
        echo ""
        echo "üìù GitHub OAuth Setup:"
        echo "1. Go to https://github.com/settings/developers"
        echo "2. Create new OAuth App"
        echo "3. Set Authorization callback URL: http://localhost/oauth2/callback"
        echo ""
        ;;
    3)
        PROVIDER="azure"
        echo ""
        echo "üìù Azure AD Setup:"
        echo "1. Go to Azure Portal ‚Üí Azure Active Directory ‚Üí App registrations"
        echo "2. Register new application"
        echo "3. Add redirect URI: http://localhost/oauth2/callback"
        echo "4. Create a client secret"
        echo ""
        ;;
    4)
        PROVIDER="oidc"
        echo ""
        read -p "Enter OIDC Issuer URL: " OIDC_ISSUER
        echo ""
        ;;
    *)
        echo "Invalid choice. Defaulting to Google."
        PROVIDER="google"
        ;;
esac

# Get OAuth credentials
read -p "Enter OAuth Client ID: " CLIENT_ID
read -p "Enter OAuth Client Secret: " CLIENT_SECRET
echo ""

# Create .env file
cat > .env << EOF
# OAuth2 Proxy Configuration
# Generated by setup.sh on $(date)

# Cookie secret for encrypting session cookies
OAUTH2_PROXY_COOKIE_SECRET=${COOKIE_SECRET}

# OAuth Provider Credentials
OAUTH2_PROXY_CLIENT_ID=${CLIENT_ID}
OAUTH2_PROXY_CLIENT_SECRET=${CLIENT_SECRET}
EOF

if [ "$PROVIDER" = "oidc" ]; then
    echo "OAUTH2_PROXY_OIDC_ISSUER_URL=${OIDC_ISSUER}" >> .env
fi

echo "‚úÖ .env file created successfully!"
echo ""

# Update docker-compose.yml if not using Google
if [ "$PROVIDER" != "google" ]; then
    echo "‚ö†Ô∏è  Don't forget to update docker-compose.yml to use --provider=${PROVIDER}"
    if [ "$PROVIDER" = "azure" ]; then
        echo "   Also add: --azure-tenant=<your-tenant-id>"
    fi
    if [ "$PROVIDER" = "oidc" ]; then
        echo "   Also add: --oidc-issuer-url=${OIDC_ISSUER}"
    fi
    echo ""
fi

# Ask if user wants to start services
read -p "Do you want to start the services now? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo ""
    echo "üöÄ Building and starting services..."
    docker-compose up -d --build
    echo ""
    echo "‚úÖ Services started!"
    echo ""
    echo "üìù Access the application at: http://localhost"
    echo "üìä View logs with: docker-compose logs -f"
    echo ""
else
    echo ""
    echo "To start the services later, run:"
    echo "  docker-compose up -d --build"
    echo ""
fi

echo "‚úÖ Setup complete!"

